{"version":3,"sources":["types/SortType.ts","components/TodoItem/TodoItem.tsx","components/TodoList/TodoList.tsx","components/TodoFilter/TodoFilter.tsx","api.ts","components/Loader/Loader.tsx","helpers/variables.ts","components/TodoModal/TodoModal.tsx","App.tsx","index.tsx"],"names":["SortType","TodoItem","todo","selectedTodo","onSelectedTodo","id","title","completed","isSelected","className","cn","type","onClick","TodoList","todos","map","TodoFilter","query","onQuery","onResetQuery","selectedSortType","handleSelectFilter","value","onChange","Object","values","selectedType","charAt","toUpperCase","slice","placeholder","style","pointerEvents","get","url","delay","fullURL","Promise","resolve","setTimeout","then","fetch","res","json","Loader","ERROR_MESSAGE","TodoModal","useState","selectedUser","setSelectedUser","isLoading","setIsLoading","useEffect","userId","user","catch","console","error","finally","href","email","name","App","setTodos","setQuery","All","setSelectedSortType","setSelectedTodo","handleSelectedTodo","visibleTodos","optionChange","getNewTodos","filter","Active","Complited","preparedTitle","trim","toLowerCase","preparedQuery","includes","getPreparedTodos","event","target","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.04e4908d.chunk.js","sourcesContent":["export enum SortType {\n  All = 'all',\n  Active = 'active',\n  Complited = 'completed',\n}\n","import cn from 'classnames';\nimport { Todo } from '../../types/Todo';\n\ntype Props = {\n  todo: Todo\n  selectedTodo: Todo | null,\n  onSelectedTodo: (todo: Todo) => void,\n};\n\nexport const TodoItem: React.FC<Props> = ({\n  todo,\n  selectedTodo,\n  onSelectedTodo,\n}) => {\n  const {\n    id,\n    title,\n    completed,\n  } = todo;\n\n  const isSelected = id === selectedTodo?.id;\n\n  return (\n    <tr\n      data-cy=\"todo\"\n      className={cn({\n        'has-background-info-light': isSelected,\n      })}\n    >\n      <td className=\"is-vcentered\">{id}</td>\n      <td className=\"is-vcentered\">\n        {completed && (\n          <span className=\"icon\" data-cy=\"iconCompleted\">\n            <i className=\"fas fa-check\" />\n          </span>\n        )}\n      </td>\n      <td className=\"is-vcentered is-expanded\">\n        <p className={cn({\n          'has-text-success': completed,\n          'has-text-danger': !completed,\n        })}\n        >\n          {title}\n        </p>\n      </td>\n      <td className=\"has-text-right is-vcentered\">\n        <button\n          data-cy=\"selectButton\"\n          className=\"button\"\n          type=\"button\"\n          onClick={() => {\n            onSelectedTodo(todo);\n          }}\n        >\n          <span className=\"icon\">\n            <i className={cn('far', {\n              'fa-eye': !isSelected,\n              'fa-eye-slash': isSelected,\n            })}\n            />\n          </span>\n        </button>\n      </td>\n    </tr>\n  );\n};\n","import { Todo } from '../../types/Todo';\nimport { TodoItem } from '../TodoItem';\n\ntype Props = {\n  todos: Todo[],\n  selectedTodo: Todo | null,\n  onSelectedTodo: (todo: Todo) => void,\n};\n\nexport const TodoList: React.FC<Props> = ({\n  todos,\n  selectedTodo,\n  onSelectedTodo,\n}) => {\n  return (\n    <table className=\"table is-narrow is-fullwidth\">\n      <thead>\n        <tr>\n          <th>#</th>\n          <th>\n            <span className=\"icon\">\n              <i className=\"fas fa-check\" />\n            </span>\n          </th>\n          <th>Title</th>\n          <th> </th>\n        </tr>\n      </thead>\n\n      <tbody>\n\n        {todos.map(todo => (\n          <TodoItem\n            key={todo.id}\n            todo={todo}\n            selectedTodo={selectedTodo}\n            onSelectedTodo={onSelectedTodo}\n          />\n        ))}\n      </tbody>\n    </table>\n  );\n};\n","import { SortType } from '../../types/SortType';\n\ntype Props = {\n  query: string,\n  onQuery: (event: React.ChangeEvent<HTMLInputElement>) => void\n  onResetQuery: () => void,\n  selectedSortType: SortType,\n  handleSelectFilter: (event: React.ChangeEvent<HTMLSelectElement>) => void\n};\n\nexport const TodoFilter: React.FC<Props> = ({\n  query,\n  onQuery = () => { },\n  onResetQuery = () => { },\n  selectedSortType,\n  handleSelectFilter,\n}) => {\n  return (\n    <form className=\"field has-addons\">\n      <p className=\"control\">\n        <span className=\"select\">\n          <select\n            data-cy=\"statusSelect\"\n            value={selectedSortType}\n            onChange={handleSelectFilter}\n          >\n            {Object.values(SortType).map((selectedType) => (\n              <option key={selectedType} value={selectedType}>\n                {selectedType.charAt(0).toUpperCase() + selectedType.slice(1)}\n              </option>\n            ))}\n          </select>\n        </span>\n      </p>\n\n      <p className=\"control is-expanded has-icons-left has-icons-right\">\n        <input\n          data-cy=\"searchInput\"\n          type=\"text\"\n          className=\"input\"\n          placeholder=\"Search...\"\n          value={query}\n          onChange={onQuery}\n        />\n        <span className=\"icon is-left\">\n          <i className=\"fas fa-magnifying-glass\" />\n        </span>\n\n        {query && (\n          <span className=\"icon is-right\" style={{ pointerEvents: 'all' }}>\n            {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n            <button\n              data-cy=\"clearSearchButton\"\n              type=\"button\"\n              className=\"delete\"\n              onClick={onResetQuery}\n            />\n          </span>\n        )}\n      </p>\n    </form>\n  );\n};\n","/* eslint-disable no-console */\nimport { Todo } from './types/Todo';\nimport { User } from './types/User';\n\n// eslint-disable-next-line max-len\nconst BASE_URL = 'https://mate-academy.github.io/react_dynamic-list-of-todos/api';\n\nfunction wait(delay: number): Promise<void> {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\nfunction get<T>(url: string): Promise<T> {\n  // eslint-disable-next-line prefer-template\n  const fullURL = BASE_URL + url + '.json';\n\n  return wait(300)\n    .then(() => fetch(fullURL))\n    .then(res => res.json());\n}\n\nexport const getTodos = () => get<Todo[]>('/todos');\n\nexport const getUser = (userId: number) => get<User>(`/users/${userId}`);\n","import React from 'react';\nimport './Loader.scss';\n\nexport const Loader: React.FC = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","export const ERROR_MESSAGE = 'Invalid data';\n","import React, { useEffect, useState } from 'react';\nimport { Loader } from '../Loader';\nimport { getUser } from '../../api';\nimport { User } from '../../types/User';\nimport { Todo } from '../../types/Todo';\nimport { ERROR_MESSAGE } from '../../helpers/variables';\n\ntype Props = {\n  selectedTodo: Todo,\n  onSelectedTodo: (todo: Todo | null) => void\n};\n\nexport const TodoModal: React.FC<Props> = ({\n  selectedTodo,\n  onSelectedTodo,\n}) => {\n  const [selectedUser, setSelectedUser] = useState<User | null>(null);\n  const [isLoading, setIsLoading] = useState(false);\n\n  useEffect(() => {\n    setIsLoading(true);\n\n    getUser(selectedTodo.userId)\n      .then((user) => setSelectedUser(user))\n      // eslint-disable-next-line no-console\n      .catch(() => console.error(ERROR_MESSAGE))\n      .finally(() => setIsLoading(false));\n  }, []);\n\n  return (\n    <div className=\"modal is-active\" data-cy=\"modal\">\n      <div className=\"modal-background\" />\n\n      {isLoading ? (\n        <Loader />\n      ) : (\n        <div className=\"modal-card\">\n          <header className=\"modal-card-head\">\n            <div\n              className=\"modal-card-title has-text-weight-medium\"\n              data-cy=\"modal-header\"\n            >\n              {`Todo #${selectedTodo?.id}`}\n            </div>\n\n            {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n            <button\n              type=\"button\"\n              className=\"delete\"\n              data-cy=\"modal-close\"\n              onClick={() => onSelectedTodo(null)}\n            />\n          </header>\n\n          <div className=\"modal-card-body\">\n            <p className=\"block\" data-cy=\"modal-title\">\n              {selectedTodo?.title}\n            </p>\n\n            <p className=\"block\" data-cy=\"modal-user\">\n              {selectedTodo.completed\n                ? <strong className=\"has-text-success\">Done</strong>\n                : <strong className=\"has-text-danger\">Planned</strong>}\n\n              {' by '}\n\n              <a href={`mailto:${selectedUser?.email}`}>\n                {selectedUser?.name}\n              </a>\n            </p>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n","/* eslint-disable max-len */\nimport React, { useEffect, useState } from 'react';\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\n\nimport { TodoList } from './components/TodoList';\nimport { TodoFilter } from './components/TodoFilter';\nimport { getTodos } from './api';\nimport { Todo } from './types/Todo';\n\nimport { TodoModal } from './components/TodoModal';\nimport { Loader } from './components/Loader';\nimport { ERROR_MESSAGE } from './helpers/variables';\nimport { SortType } from './types/SortType';\n\nfunction getPreparedTodos(\n  todos: Todo[],\n  query: string,\n  optionChange: SortType,\n): Todo[] {\n  let getNewTodos = [...todos];\n\n  getNewTodos = getNewTodos.filter(todo => {\n    switch (optionChange) {\n      case SortType.Active:\n        return !todo.completed;\n      case SortType.Complited:\n        return todo.completed;\n      case SortType.All:\n      default:\n        return todo;\n    }\n  });\n\n  if (query) {\n    getNewTodos = getNewTodos.filter(({ title }) => {\n      const preparedTitle = title.trim().toLowerCase();\n      const preparedQuery = query.trim().toLowerCase();\n\n      return preparedTitle.includes(preparedQuery);\n    });\n  }\n\n  return getNewTodos;\n}\n\nexport const App: React.FC = () => {\n  const [todos, setTodos] = useState<Todo[]>([]);\n  const [query, setQuery] = useState('');\n  const [selectedSortType, setSelectedSortType] = useState<SortType>(SortType.All);\n  const [isLoading, setIsLoading] = useState(false);\n  const [selectedTodo, setSelectedTodo] = useState<Todo | null>(null);\n\n  const handleSelectedTodo = (todo: Todo | null) => setSelectedTodo(todo);\n\n  const handleSelectFilter = (event: React.ChangeEvent<HTMLSelectElement>) => {\n    setSelectedSortType(event.target.value as SortType);\n  };\n\n  const handleResetQuery = () => {\n    setQuery('');\n  };\n\n  const visibleTodos = getPreparedTodos(todos, query, selectedSortType);\n\n  const handleQuery = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setQuery(event.target.value);\n  };\n\n  useEffect(() => {\n    setIsLoading(true);\n\n    getTodos()\n      .then(setTodos)\n      // eslint-disable-next-line no-console\n      .catch(() => console.error(ERROR_MESSAGE))\n      .finally(() => setIsLoading(false));\n  }, []);\n\n  return (\n    <>\n      <div className=\"section\">\n        <div className=\"container\">\n          <div className=\"box\">\n            <h1 className=\"title\">Todos:</h1>\n\n            <div className=\"block\">\n              <TodoFilter\n                query={query}\n                onQuery={handleQuery}\n                onResetQuery={handleResetQuery}\n                selectedSortType={selectedSortType}\n                handleSelectFilter={handleSelectFilter}\n              />\n            </div>\n\n            <div className=\"block\">\n              {isLoading\n                ? <Loader />\n                : (\n                  <TodoList\n                    selectedTodo={selectedTodo}\n                    todos={visibleTodos}\n                    onSelectedTodo={handleSelectedTodo}\n                  />\n                )}\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {selectedTodo && (\n        <TodoModal\n          selectedTodo={selectedTodo}\n          onSelectedTodo={handleSelectedTodo}\n        />\n      )}\n    </>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}